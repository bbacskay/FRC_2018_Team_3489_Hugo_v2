// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.FEMAv2.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3489.FEMAv2.Robot;

import com.ctre.phoenix.motorcontrol.ControlMode;

/**
 *
 */
public class cmdDriveStraight extends Command {
	public static final double ANGLE_OFFSET = 0.5;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double heading;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public cmdDriveStraight(double distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = distance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Robot.driveSystem.resetEncoders();
    	heading = Robot.driveSystem.getHeading();
    	System.out.println("Drive staight started param: " + m_distance);
    	if ( m_distance >= 0) {
    		Robot.driveSystem.driveStraight(0.6);
    	} else {
    		Robot.driveSystem.driveStraight(-0.6);
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
/*    	
    if(m_distance >= 0) {
    	//System.out.println(Robot.driveSystem.getRightEncoder());
    	if (Math.abs(heading - Robot.driveSystem.getHeading()) <= ANGLE_OFFSET &&
    		Robot.driveSystem.getRightEncoder() <= m_distance) {
    		Robot.driveSystem.move(0.65, 0.65);
    	}
    	else if (heading - Robot.driveSystem.getHeading() >= -ANGLE_OFFSET &&
    		Robot.driveSystem.getRightEncoder() <= m_distance) {
    		Robot.driveSystem.move(0.65, 0.7);
    	}
    	else if (heading - Robot.driveSystem.getHeading() <= ANGLE_OFFSET &&
        		Robot.driveSystem.getRightEncoder() <= m_distance) {
        		Robot.driveSystem.move(0.7, 0.65);
        }
    } else {
    	//System.out.println(Robot.driveSystem.getRightEncoder());
    	if (Math.abs(heading - Robot.driveSystem.getHeading()) <= ANGLE_OFFSET &&
    		Robot.driveSystem.getRightEncoder() >= m_distance) {
    		Robot.driveSystem.move(-0.65, -0.65);
    	}
    	else if (heading - Robot.driveSystem.getHeading() >= -ANGLE_OFFSET &&
    		Robot.driveSystem.getRightEncoder() >= m_distance) {
    		Robot.driveSystem.move(-0.7, -0.65);
    	}
    	else if (heading - Robot.driveSystem.getHeading() <= ANGLE_OFFSET &&
        		Robot.driveSystem.getRightEncoder() >= m_distance) {
        		Robot.driveSystem.move(-0.65, -0.7);
        }
    }
 */
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	boolean result = false;
    	if (m_distance >= 0) {
    		result = Robot.driveSystem.getRightEncoder() > m_distance;
    	} else {
    		result = Robot.driveSystem.getRightEncoder() < m_distance;
    	}
    	return (result);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveSystem.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
