// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.FEMAv2;

import org.usfirst.frc3489.FEMAv2.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton driveMode;
    public Joystick joystickLeft;
    public JoystickButton climber;
    public Joystick joystickRight;
    public JoystickButton grabCube;
    public JoystickButton releaseCube;
    public JoystickButton lifterGoFloorPos;
    public JoystickButton lifterGoSwitchPos;
    public JoystickButton lifterGoLScale;
    public JoystickButton lifterGoHScale;
    public Joystick joystickMani;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickMani = new Joystick(3);
        
        lifterGoHScale = new JoystickButton(joystickMani, 10);
        lifterGoHScale.whenPressed(new cmdLifterToHScalePos());
        lifterGoLScale = new JoystickButton(joystickMani, 9);
        lifterGoLScale.whenPressed(new cmdLifterToLScalePos());
        lifterGoSwitchPos = new JoystickButton(joystickMani, 8);
        lifterGoSwitchPos.whenPressed(new cmdLifterToSwitchPos());
        lifterGoFloorPos = new JoystickButton(joystickMani, 7);
        lifterGoFloorPos.whenPressed(new cmdLifterToFloorPos());
        releaseCube = new JoystickButton(joystickMani, 4);
        releaseCube.whenPressed(new cmdGrabCube());
        grabCube = new JoystickButton(joystickMani, 3);
        grabCube.whenPressed(new cmdReleaseCube());
        joystickRight = new Joystick(2);
        
        climber = new JoystickButton(joystickRight, 2);
        climber.whenPressed(new cmdClimbMode());
        joystickLeft = new Joystick(1);
        
        driveMode = new JoystickButton(joystickLeft, 2);
        driveMode.whenPressed(new cmdDriveMode());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("cmd Grab Cube", new cmdGrabCube());
        SmartDashboard.putData("cmd Release Cube", new cmdReleaseCube());
        SmartDashboard.putData("cmdLifterToFloorPos", new cmdLifterToFloorPos());
        SmartDashboard.putData("cmdLifterToSwitchPos", new cmdLifterToSwitchPos());
        SmartDashboard.putData("cmdLifterToLScalePos", new cmdLifterToLScalePos());
        SmartDashboard.putData("cmdLifterToHScalePos", new cmdLifterToHScalePos());
        SmartDashboard.putData("cmdLifterDefault", new cmdLifterDefault());
        SmartDashboard.putData("cmdReleaseClimber", new cmdReleaseClimber());
        SmartDashboard.putData("cmdDriveMode", new cmdDriveMode());
        SmartDashboard.putData("cmdClimbMode", new cmdClimbMode());
        SmartDashboard.putData("centerAuto", new centerAuto());
        SmartDashboard.putData("cmdDriveTurn: Left45", new cmdDriveTurn(-45));
        SmartDashboard.putData("cmdDriveTurn: Right45", new cmdDriveTurn(45));
        SmartDashboard.putData("cmdDriveTurn: Left90", new cmdDriveTurn(-90));
        SmartDashboard.putData("cmdDriveTurn: Right90", new cmdDriveTurn(90));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }

    public Joystick getJoystickRight() {
        return joystickRight;
    }

    public Joystick getJoystickMani() {
        return joystickMani;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

