// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.FEMAv2;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.SPI;
import com.kauailabs.navx.frc.AHRS;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveSystemMotorFrontLeft;
    public static WPI_TalonSRX driveSystemMotorFrontRight;
    public static DifferentialDrive driveSystemDifferentialDrive;
    public static WPI_TalonSRX driveSystemMotorBackLeft;
    public static WPI_TalonSRX driveSystemMotorBackRight;
    public static DoubleSolenoid driveSystemBoxShifter;
    public static Encoder driveSystemLeftEnc;
    public static Encoder driveSystemRightEnc;
    public static DigitalInput driveSystemMaximumClimb;
    public static Solenoid driveSystemclimberPin;
    public static DigitalInput gripperautoCube;
    public static Solenoid gripperGripper20Psi;
    public static Solenoid gripperGripper60Psi;
    public static WPI_TalonSRX gripperleftIntake;
    public static WPI_TalonSRX gripperrightIntake;
    public static WPI_TalonSRX lifterlifter1;
    public static WPI_TalonSRX lifterlifter2;
    public static Solenoid lifterlifterBreak;
    public static DigitalInput autonomousSelectionLeftSelect;
    public static DigitalInput autonomousSelectionRightSelect;
    public static DigitalInput autonomousSelectionCh1;
    public static DigitalInput autonomousSelectionCh2;
    public static DigitalInput autonomousSelectionCh3;
    public static DigitalInput autonomousSelectionCh4;
    public static DigitalInput autonomousSelectionCh5;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AHRS navx;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemMotorFrontLeft = new WPI_TalonSRX(1);
        
        
        driveSystemMotorFrontRight = new WPI_TalonSRX(2);
        
        
        driveSystemDifferentialDrive = new DifferentialDrive(driveSystemMotorFrontLeft, driveSystemMotorFrontRight);
        LiveWindow.addActuator("DriveSystem", "Differential Drive", driveSystemDifferentialDrive);
        driveSystemDifferentialDrive.setSafetyEnabled(true);
        driveSystemDifferentialDrive.setExpiration(0.1);
        driveSystemDifferentialDrive.setMaxOutput(1.0);

        driveSystemMotorBackLeft = new WPI_TalonSRX(3);
        
        
        driveSystemMotorBackRight = new WPI_TalonSRX(4);
        
        
        driveSystemBoxShifter = new DoubleSolenoid(20, 4, 5);
        LiveWindow.addActuator("DriveSystem", "BoxShifter", driveSystemBoxShifter);
        
        driveSystemLeftEnc = new Encoder(4, 5, false, EncodingType.k2X);
        LiveWindow.addSensor("DriveSystem", "Left Enc", driveSystemLeftEnc);
        driveSystemLeftEnc.setDistancePerPulse(1.0);
        driveSystemLeftEnc.setPIDSourceType(PIDSourceType.kDisplacement);
        driveSystemRightEnc = new Encoder(6, 7, false, EncodingType.k2X);
        LiveWindow.addSensor("DriveSystem", "Right Enc", driveSystemRightEnc);
        driveSystemRightEnc.setDistancePerPulse(1.0);
        driveSystemRightEnc.setPIDSourceType(PIDSourceType.kDisplacement);
        driveSystemMaximumClimb = new DigitalInput(8);
        LiveWindow.addSensor("DriveSystem", "Maximum Climb", driveSystemMaximumClimb);
        
        driveSystemclimberPin = new Solenoid(20, 0);
        LiveWindow.addActuator("DriveSystem", "climberPin", driveSystemclimberPin);
        
        gripperautoCube = new DigitalInput(3);
        LiveWindow.addSensor("Gripper", "autoCube", gripperautoCube);
        
        gripperGripper20Psi = new Solenoid(20, 3);
        LiveWindow.addActuator("Gripper", "Gripper20Psi", gripperGripper20Psi);
        
        gripperGripper60Psi = new Solenoid(20, 2);
        LiveWindow.addActuator("Gripper", "Gripper60Psi", gripperGripper60Psi);
        
        gripperleftIntake = new WPI_TalonSRX(8);
        
        
        gripperrightIntake = new WPI_TalonSRX(5);
        
        
        lifterlifter1 = new WPI_TalonSRX(6);
        
        
        lifterlifter2 = new WPI_TalonSRX(7);
        
        
        lifterlifterBreak = new Solenoid(20, 1);
        LiveWindow.addActuator("Lifter", "lifterBreak", lifterlifterBreak);
        
        autonomousSelectionLeftSelect = new DigitalInput(10);
        LiveWindow.addSensor("AutonomousSelection", "LeftSelect", autonomousSelectionLeftSelect);
        
        autonomousSelectionRightSelect = new DigitalInput(11);
        LiveWindow.addSensor("AutonomousSelection", "RightSelect", autonomousSelectionRightSelect);
        
        autonomousSelectionCh1 = new DigitalInput(19);
        LiveWindow.addSensor("AutonomousSelection", "Ch1", autonomousSelectionCh1);
        
        autonomousSelectionCh2 = new DigitalInput(20);
        LiveWindow.addSensor("AutonomousSelection", "Ch2", autonomousSelectionCh2);
        
        autonomousSelectionCh3 = new DigitalInput(21);
        LiveWindow.addSensor("AutonomousSelection", "Ch3", autonomousSelectionCh3);
        
        autonomousSelectionCh4 = new DigitalInput(22);
        LiveWindow.addSensor("AutonomousSelection", "Ch4", autonomousSelectionCh4);
        
        autonomousSelectionCh5 = new DigitalInput(23);
        LiveWindow.addSensor("AutonomousSelection", "Ch5", autonomousSelectionCh5);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        try {
        	navx = new AHRS(SPI.Port.kMXP);
        } catch (RuntimeException ex ) {
        	DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
        
        LiveWindow.add(lifterlifter1);
        LiveWindow.add(lifterlifter2);
        LiveWindow.add(lifterlifterBreak);
        
    }
}
