// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.HUGOv2.subsystems;

import org.usfirst.frc3489.HUGOv2.RobotMap;
import org.usfirst.frc3489.HUGOv2.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.DoubleSolenoid.*;

/**
 *
 */
public class Drivebase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX motorFrontLeft = RobotMap.drivebaseMotorFrontLeft;
    private final WPI_TalonSRX motorFrontRight = RobotMap.drivebaseMotorFrontRight;
    private final DifferentialDrive driveTrain = RobotMap.drivebaseDriveTrain;
    private final WPI_TalonSRX motorRearLeft = RobotMap.drivebaseMotorRearLeft;
    private final WPI_TalonSRX motorRearRight = RobotMap.drivebaseMotorRearRight;
    private final DoubleSolenoid rocketBoxShifter = RobotMap.drivebaseRocketBoxShifter;
    private final Encoder leftEnc = RobotMap.drivebaseLeftEnc;
    private final Encoder rightEnc = RobotMap.drivebaseRightEnc;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * Drivebase constructor
     */
    public Drivebase() {
		driveMode();
		
		// Initialize motors
		motorFrontLeft.setInverted(true);
		motorFrontRight.setInverted(true);
		motorRearLeft.setInverted(true);
		motorRearRight.setInverted(true);
		
		// Activate following mode for the slave motors
		motorRearLeft.follow(motorFrontLeft);
    	motorRearRight.follow(motorFrontRight);
	}
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveMode() {
    	rocketBoxShifter.set(Value.kReverse);
    }
    
    public void climbMode() {
    	rocketBoxShifter.set(Value.kForward);
    }
    
    
    public void stop() {
    	driveTrain.tankDrive(0,0);
    }
    
    public void tankDriveTeleop(Joystick leftJoy, Joystick rightJoy) {
    	double lValue;
    	double rValue;
    	
    	lValue = leftJoy.getY() * -0.85;
    	rValue = rightJoy.getY() * -0.85;
    	
    	
    	driveTrain.tankDrive(lValue, rValue);
    }
    
    public void tankDrive(double leftSpeed, double rightSpeed) {
    	driveTrain.tankDrive(leftSpeed, rightSpeed);
    }
    
}

